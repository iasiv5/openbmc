[
    {
        "Desc": {
            "Name": "SYSTEM_AIRFLOW_CFM",
            "SensorType": "airflow",
            "MaxValue": 40000,
            "MinValue": 0
        },
        "Associations": [
            [
                "chassis",
                "all_sensors",
                "/xyz/openbmc_project/inventory/system/board/NVIDIA_GB300_0"
            ]
        ],
        "Params": {
            "DbusParam": [
                {
                    "ParamName": "FAN0_PWM_PCT",
                    "Desc": {
                        "Name": "FAN0_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN1_PWM_PCT",
                    "Desc": {
                        "Name": "FAN1_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN2_PWM_PCT",
                    "Desc": {
                        "Name": "FAN2_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN3_PWM_PCT",
                    "Desc": {
                        "Name": "FAN3_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN4_PWM_PCT",
                    "Desc": {
                        "Name": "FAN4_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN5_PWM_PCT",
                    "Desc": {
                        "Name": "FAN5_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN6_PWM_PCT",
                    "Desc": {
                        "Name": "FAN6_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN7_PWM_PCT",
                    "Desc": {
                        "Name": "FAN7_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                }
            ]
        },
        "Expression": [
            "max(6.95927258, ",
            "((2.825758 * (avg(FAN0_PWM_PCT, FAN1_PWM_PCT, FAN2_PWM_PCT, FAN3_PWM_PCT, FAN4_PWM_PCT, FAN5_PWM_PCT, FAN6_PWM_PCT, FAN7_PWM_PCT)^2)) + ",
            "(91.27348 * avg(FAN0_PWM_PCT, FAN1_PWM_PCT, FAN2_PWM_PCT, FAN3_PWM_PCT, FAN4_PWM_PCT, FAN5_PWM_PCT, FAN6_PWM_PCT, FAN7_PWM_PCT)) - ",
            "2.196333))"
        ]
    },
    {
        "Desc": {
            "Name": "VIRTUAL_FIOBOARD_TEMP_C",
            "SensorType": "temperature",
            "MaxValue": 127,
            "MinValue": -127
        },
        "Associations": [
            [
                "chassis",
                "all_sensors",
                "/xyz/openbmc_project/inventory/system/board/Clemente_FIO"
            ]
        ],
        "Params": {
            "DbusParam": [
                {
                    "ParamName": "FIOBOARD_TEMP_C",
                    "Desc": {
                        "Name": "FIOBOARD_TEMP_C",
                        "SensorType": "temperature"
                    }
                },
                {
                    "ParamName": "FAN0_PWM_PCT",
                    "Desc": {
                        "Name": "FAN0_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN1_PWM_PCT",
                    "Desc": {
                        "Name": "FAN1_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN2_PWM_PCT",
                    "Desc": {
                        "Name": "FAN2_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN3_PWM_PCT",
                    "Desc": {
                        "Name": "FAN3_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN4_PWM_PCT",
                    "Desc": {
                        "Name": "FAN4_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN5_PWM_PCT",
                    "Desc": {
                        "Name": "FAN5_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN6_PWM_PCT",
                    "Desc": {
                        "Name": "FAN6_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                },
                {
                    "ParamName": "FAN7_PWM_PCT",
                    "Desc": {
                        "Name": "FAN7_PWM_PCT",
                        "SensorType": "fan_pwm"
                    }
                }
            ]
        },
        "Expression": [
            "var DUTY_AVG:=avg(FAN0_PWM_PCT, FAN1_PWM_PCT, FAN2_PWM_PCT, FAN3_PWM_PCT, FAN4_PWM_PCT, FAN5_PWM_PCT, FAN6_PWM_PCT, FAN7_PWM_PCT);",
            "var DUTY_OFS[11]:={100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0};",
            "var CAL_OFS[11]:={-0.8, -0.9, -1.0, -1.2, -1.3, -1.6, -2.0, -3.0, -4.8, -4.8, -4.8};",
            "switch {",
            "  case inrange(DUTY_OFS[1],DUTY_AVG,DUTY_OFS[0]): FIOBOARD_TEMP_C+(CAL_OFS[0]+((DUTY_AVG-DUTY_OFS[0])*(CAL_OFS[1]-CAL_OFS[0])/(DUTY_OFS[1]-DUTY_OFS[0])));",
            "  case inrange(DUTY_OFS[2],DUTY_AVG,DUTY_OFS[1]): FIOBOARD_TEMP_C+(CAL_OFS[1]+((DUTY_AVG-DUTY_OFS[1])*(CAL_OFS[2]-CAL_OFS[1])/(DUTY_OFS[2]-DUTY_OFS[1])));",
            "  case inrange(DUTY_OFS[3],DUTY_AVG,DUTY_OFS[2]): FIOBOARD_TEMP_C+(CAL_OFS[2]+((DUTY_AVG-DUTY_OFS[2])*(CAL_OFS[3]-CAL_OFS[2])/(DUTY_OFS[3]-DUTY_OFS[2])));",
            "  case inrange(DUTY_OFS[4],DUTY_AVG,DUTY_OFS[3]): FIOBOARD_TEMP_C+(CAL_OFS[3]+((DUTY_AVG-DUTY_OFS[3])*(CAL_OFS[4]-CAL_OFS[3])/(DUTY_OFS[4]-DUTY_OFS[3])));",
            "  case inrange(DUTY_OFS[5],DUTY_AVG,DUTY_OFS[4]): FIOBOARD_TEMP_C+(CAL_OFS[4]+((DUTY_AVG-DUTY_OFS[4])*(CAL_OFS[5]-CAL_OFS[4])/(DUTY_OFS[5]-DUTY_OFS[4])));",
            "  case inrange(DUTY_OFS[6],DUTY_AVG,DUTY_OFS[5]): FIOBOARD_TEMP_C+(CAL_OFS[5]+((DUTY_AVG-DUTY_OFS[5])*(CAL_OFS[6]-CAL_OFS[5])/(DUTY_OFS[6]-DUTY_OFS[5])));",
            "  case inrange(DUTY_OFS[7],DUTY_AVG,DUTY_OFS[6]): FIOBOARD_TEMP_C+(CAL_OFS[6]+((DUTY_AVG-DUTY_OFS[6])*(CAL_OFS[7]-CAL_OFS[6])/(DUTY_OFS[7]-DUTY_OFS[6])));",
            "  case inrange(DUTY_OFS[8],DUTY_AVG,DUTY_OFS[7]): FIOBOARD_TEMP_C+(CAL_OFS[7]+((DUTY_AVG-DUTY_OFS[7])*(CAL_OFS[8]-CAL_OFS[7])/(DUTY_OFS[8]-DUTY_OFS[7])));",
            "  case inrange(DUTY_OFS[9],DUTY_AVG,DUTY_OFS[8]): FIOBOARD_TEMP_C+(CAL_OFS[8]+((DUTY_AVG-DUTY_OFS[8])*(CAL_OFS[9]-CAL_OFS[8])/(DUTY_OFS[9]-DUTY_OFS[8])));",
            "  case inrange(DUTY_OFS[10],DUTY_AVG,DUTY_OFS[9]): FIOBOARD_TEMP_C+(CAL_OFS[9]+((DUTY_AVG-DUTY_OFS[9])*(CAL_OFS[10]-CAL_OFS[9])/(DUTY_OFS[10]-DUTY_OFS[9])));",
            "  default: FIOBOARD_TEMP_C+CAL_OFS[10];",
            "}"
        ]
    },
    {
        "Desc": {
            "Name": "INTERPOSER_CABLE_TSENSE_POSITIVE_TEMP_C",
            "SensorType": "temperature",
            "MaxValue": 127,
            "MinValue": -127
        },
        "Associations": [
            [
                "chassis",
                "all_sensors",
                "/xyz/openbmc_project/inventory/system/board/Clemente_Interposer"
            ]
        ],
        "Params": {
            "DbusParam": [
                {
                    "ParamName": "Interposer_CTP_CURR",
                    "Desc": {
                        "Name": "INTERPOSER_CABLE_TSENSE_POSITIVE_CURR_A",
                        "SensorType": "current"
                    }
                }
            ]
        },
        "Expression": [
            "var CURR[14]:={",
            "    0.000103096, 0.000167266, 0.000264678, 0.000409074, 0.000618325,",
            "    0.000914888, 0.001326367, 0.001885714, 0.002631579, 0.003606557,",
            "    0.004860088, 0.006432749, 0.008375635, 0.009510086};",
            "var TEMP[14]:={0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 125};",
            "switch {",
            "  case inrange(CURR[0],Interposer_CTP_CURR,CURR[1]): TEMP[0]+((Interposer_CTP_CURR-CURR[0])*(TEMP[1]-TEMP[0])/(CURR[1]-CURR[0]));",
            "  case inrange(CURR[1],Interposer_CTP_CURR,CURR[2]): TEMP[1]+((Interposer_CTP_CURR-CURR[1])*(TEMP[2]-TEMP[1])/(CURR[2]-CURR[1]));",
            "  case inrange(CURR[2],Interposer_CTP_CURR,CURR[3]): TEMP[2]+((Interposer_CTP_CURR-CURR[2])*(TEMP[3]-TEMP[2])/(CURR[3]-CURR[2]));",
            "  case inrange(CURR[3],Interposer_CTP_CURR,CURR[4]): TEMP[3]+((Interposer_CTP_CURR-CURR[3])*(TEMP[4]-TEMP[3])/(CURR[4]-CURR[3]));",
            "  case inrange(CURR[4],Interposer_CTP_CURR,CURR[5]): TEMP[4]+((Interposer_CTP_CURR-CURR[4])*(TEMP[5]-TEMP[4])/(CURR[5]-CURR[4]));",
            "  case inrange(CURR[5],Interposer_CTP_CURR,CURR[6]): TEMP[5]+((Interposer_CTP_CURR-CURR[5])*(TEMP[6]-TEMP[5])/(CURR[6]-CURR[5]));",
            "  case inrange(CURR[6],Interposer_CTP_CURR,CURR[7]): TEMP[6]+((Interposer_CTP_CURR-CURR[6])*(TEMP[7]-TEMP[6])/(CURR[7]-CURR[6]));",
            "  case inrange(CURR[7],Interposer_CTP_CURR,CURR[8]): TEMP[7]+((Interposer_CTP_CURR-CURR[7])*(TEMP[8]-TEMP[7])/(CURR[8]-CURR[7]));",
            "  case inrange(CURR[8],Interposer_CTP_CURR,CURR[9]): TEMP[8]+((Interposer_CTP_CURR-CURR[8])*(TEMP[9]-TEMP[8])/(CURR[9]-CURR[8]));",
            "  case inrange(CURR[9],Interposer_CTP_CURR,CURR[10]): TEMP[9]+((Interposer_CTP_CURR-CURR[9])*(TEMP[10]-TEMP[9])/(CURR[10]-CURR[9]));",
            "  case inrange(CURR[10],Interposer_CTP_CURR,CURR[11]): TEMP[10]+((Interposer_CTP_CURR-CURR[10])*(TEMP[11]-TEMP[10])/(CURR[11]-CURR[10]));",
            "  case inrange(CURR[11],Interposer_CTP_CURR,CURR[12]): TEMP[11]+((Interposer_CTP_CURR-CURR[11])*(TEMP[12]-TEMP[11])/(CURR[12]-CURR[11]));",
            "  case inrange(CURR[12],Interposer_CTP_CURR,CURR[13]): TEMP[12]+((Interposer_CTP_CURR-CURR[12])*(TEMP[13]-TEMP[12])/(CURR[13]-CURR[12]));",
            "  case Interposer_CTP_CURR>CURR[13]: TEMP[13];",
            "  default : TEMP[0];",
            "}"
        ]
    },
    {
        "Desc": {
            "Name": "PDB_MAX_VR_TEMP_C",
            "SensorType": "temperature",
            "MaxValue": 127,
            "MinValue": -127
        },
        "Associations": [
            [
                "chassis",
                "all_sensors",
                "/xyz/openbmc_project/inventory/system/board/Clemente_PDB"
            ]
        ],
        "Params": {
            "DbusParam": [
                {
                    "ParamName": "VR_N1_TEMP",
                    "Desc": {
                        "Name": "PDB_VR_P12V_N1_TEMP_C",
                        "SensorType": "temperature"
                    }
                },
                {
                    "ParamName": "VR_N2_TEMP",
                    "Desc": {
                        "Name": "PDB_VR_P12V_N2_TEMP_C",
                        "SensorType": "temperature"
                    }
                },
                {
                    "ParamName": "BRICK0_N1_TEMP",
                    "Desc": {
                        "Name": "PDB_BRICK0_P12V_N1_TEMP_C",
                        "SensorType": "temperature"
                    }
                },
                {
                    "ParamName": "BRICK1_N1_TEMP",
                    "Desc": {
                        "Name": "PDB_BRICK1_P12V_N1_TEMP_C",
                        "SensorType": "temperature"
                    }
                },
                {
                    "ParamName": "BRICK0_N2_TEMP",
                    "Desc": {
                        "Name": "PDB_BRICK0_P12V_N2_TEMP_C",
                        "SensorType": "temperature"
                    }
                },
                {
                    "ParamName": "BRICK1_N2_TEMP",
                    "Desc": {
                        "Name": "PDB_BRICK1_P12V_N2_TEMP_C",
                        "SensorType": "temperature"
                    }
                }
            ]
        },
        "Expression": [
            "max(0, VR_N1_TEMP, VR_N2_TEMP, BRICK0_N1_TEMP, BRICK1_N1_TEMP, BRICK0_N2_TEMP, BRICK1_N2_TEMP)"
        ]
    }
]
