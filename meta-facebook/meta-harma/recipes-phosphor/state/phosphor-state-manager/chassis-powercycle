#!/bin/bash

# shellcheck source=meta-facebook/meta-harma/recipes-phosphor/state/phosphor-state-manager/power-cmd
source /usr/libexec/phosphor-state-manager/power-cmd

#Sled cycle
echo "Starting Chassis Power Cycle"

chassis-power-cycle() {
    # XDP710
    ret1=$(i2cset -f -y 4 0x40 0xEC)

    # LTC4287 MFR_REBOOT_CONTROL (FDh) Read/Write
    # [3]:
    #       REBOOT 0 Write a 1 to reboot.
    # [2:0]
    #       RBT_DL 100 Configures Auto-Reboot turn-on Delay (tDL(RBT)) after the REBOOT bit is set to 1
    #       RBT_DL[2:0] DELAY
    #       000 0.580 s
    #       001 1.16 s
    #       010 2.32 s
    #       011 4.64 s
    #       100 9.28 s
    #       101 18.6 s
    #       110 37.1 s
    #       111 74.2 s
    ret2=$(i2cset -f -y 4 0x44 0xfd 0x04)
    ret3=$(i2cset -f -y 4 0x44 0xfd 0x0e)

    if [ "$ret1" -ne 0 ] && { [ "$ret2" -ne 0 ] || [ "$ret3" -ne 0 ]; }; then
        return 1
    else
        return 0
    fi
}

aegis-power-cycle() {
  i2cset -y 11 0x21 0x00 0xfe
  sleep 15
  i2cset -y 11 0x21 0x00 0xff
}

ChassisNumber=$1

if [ "$ChassisNumber" == 0 ]
then
  echo "Starting Chassis Power Cycle" 
  # According to JEDEC (JESD301-1A), the PMIC requires a minimum 
  # Vin_Bulk voltage of 5 V and a duration of at least 200 ms after
  # DIMM_CAMP assertion to guarantee successful writes to non-volatile 
  # memory. However, the motherboard currently discharges too quickly.
  # To address this, the gpio 129 signal is set to trigger the DC power
  # drop, giving the CPLD enough time to inform the DIMM and CPU before
  # the AC cycle, ensuring that the write operation completes reliably.
  gpioset 2 129=1
  sleep 0.3
  chassis-power-cycle
  sleep 3
  gpioset 2 129=0
else
  echo "Starting Aegis Power Cycle"
  aegis-power-cycle
fi
