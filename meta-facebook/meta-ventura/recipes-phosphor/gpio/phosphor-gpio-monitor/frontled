#!/bin/bash

source=$1
init=$2
power_state=$3

get_leakport() {
   if [[ $1 =~ ^PWRGD_TRAY_LEAK_PORT([0-9]+)_N$ ]]; then
      echo "leakport${BASH_REMATCH[1]}"
   fi
}

leakport=$(get_leakport "$source")
portnum=${leakport#leakport}

leak_state=$(busctl get-property xyz.openbmc_project.leakdetector "/xyz/openbmc_project/state/leak/detector/LeakPort${portnum}_Big" xyz.openbmc_project.State.Leak.Detector State | awk -F'.' '{print $NF}' | tr -d '"')

if [ "$power_state" == "assert" ]; then
   # If power is asserted and leak state is Normal, turn on blue LED and turn off amber LED
   # Else do nothing control by the leak detector leakage service
   if [ "$leak_state" == "Normal" ] || [ "$init" == "true" ]; then
      busctl set-property "xyz.openbmc_project.LED.GroupManager" "/xyz/openbmc_project/led/groups/${leakport}_amber" "xyz.openbmc_project.Led.Group" "Asserted" "b" "false"
      busctl set-property "xyz.openbmc_project.LED.GroupManager" "/xyz/openbmc_project/led/groups/${leakport}_blue" "xyz.openbmc_project.Led.Group" "Asserted" "b" "true"
   fi
elif [ "$power_state" == "deassert" ]; then
   busctl set-property "xyz.openbmc_project.LED.GroupManager" "/xyz/openbmc_project/led/groups/${leakport}_blue" "xyz.openbmc_project.Led.Group" "Asserted" "b" "false"
fi

exit 0
